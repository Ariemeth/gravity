syntax = "proto3";

package proto;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "agentpb/agent.proto";

service Validation {
    // CheckPorts executes a ports network test
    rpc CheckPorts(CheckPortsRequest) returns (CheckPortsResponse);

    // CheckBandwidth executes a bandwidth network test
    rpc CheckBandwidth(CheckBandwidthRequest) returns (CheckBandwidthResponse);

    // CheckDisks executes performance test for the specified disks
    rpc CheckDisks(CheckDisksRequest) returns (CheckDisksResponse);

    // Validate validatest this node against the requirements
    // from a manifest.
    rpc Validate(ValidateRequest) returns (ValidateResponse);
}

// CheckPortsRequest describes a ports network test request
message CheckPortsRequest {
    // Listen specifies the listen endpoints
    repeated Addr listen = 1;
    // Ping specifies the ping endpoints
    repeated Addr ping = 2;
    // Duration specifies the maximum duration for the request
    google.protobuf.Duration duration = 3;
}

// CheckPortsResponse describes the results of a ports network test
message CheckPortsResponse {
	// Listen describes the listen test results
	repeated ServerResult listen = 1;
	// Ping describes the ping test results
	repeated ServerResult ping = 2;
}

// CheckBandwidthRequest describes a bandwidth check network test
message CheckBandwidthRequest {
    // Listen specifies the listen endpoint
    Addr listen = 1;
    // Ping specifies the ping endpoints
    repeated Addr ping = 2;
    // Duration specifies the maximum duration for the request
    google.protobuf.Duration duration = 3;
}

// CheckBandwidthResponse describes the results of a bandwidth check
message CheckBandwidthResponse {
	// Bandwidth is the result of a bandwidth test
	uint64 bandwidth = 1;
}

// ServerResult defines the operation result for a server
message ServerResult {
    // Code specifies the result, with 0 for success
    int32 code = 1;
    // Error specifies an error message
    string error = 2;
    // Server specifies which server the result is from
    Addr server = 3;
}

// Addr defines an endpoint address
message Addr {
    // Network specifies the type of network (tcp, udp)
    string network = 1;
    // Addr specifies the address as IP or IP:port
    string addr = 2;
}

// ValidateRequest defines a request to run validation
message ValidateRequest {
    // Manifest specifies the application manifest with
    // requirements
    bytes manifest = 1;
    // Profile specifies the node profile to validate against
    string profile = 2;
    // FullRequirements forces validation of all requirements
    // from the manifest.
    // This is used to validate requirements during installation.
    bool full_requirements = 3;
    // ValidateOptions is additional validation options
    ValidateOptions options = 4;
    // Docker specifies the Docker configuration to validate
    Docker docker = 5;
}

// ValidateResponse describes a validation response
message ValidateResponse {
    // Failed lists the failed probes
    repeated agentpb.Probe failed = 1;
}

// ValidateOptions is additional validation options
message ValidateOptions {
    // VxlanPort is the custom overlay network port
    int32 vxlan_port = 1;
    // DnsAddrs specifies the list of listen IP addresses for coredns
    repeated string dns_addrs = 2;
    // DnsPort specifies the DNS port for coredns
    int32 dns_port = 3;
    // CheckOpenebs is used to specify if OpenEBS related checks should be performed
    bool check_openebs = 4;
}

// Docker groups Docker-relevant attributes to validate
message Docker {
    // StorageDriver specifies the Docker storage driver
    string storage_driver = 1;
}

// CheckDisksRequest describes a disks performance test request.
message CheckDisksRequest {
  // Jobs specifies a list of fio jobs to execute.
  repeated FioJobSpec jobs = 1;
  // FioPath specifies the path to fio executable.
  string fio_path = 2;
}

// FioJobSpec describes a single fio job.
message FioJobSpec {
  // Name is the job name.
  string name = 1;
  // ReadWrite specifies the I/O pattern.
  string read_write = 2;
  // IOEngine specifies I/O engine to use.
  string io_engine = 3;
  // Fdatasync specifies whether to sync data.
  bool fdatasync = 4;
  // Filename specifies the test file path.
  string filename = 5;
  // BlockSize is the block size used for I/O.
  string block_size = 6;
  // Size is the total test file size.
  string size = 7;
  // Runtime limits the maximum test runtime.
  google.protobuf.Duration runtime = 8;
}

// CheckDisksResponse is the result of the disk performance test.
message CheckDisksResponse {
  // Jobs is a list of executed fio jobs.
  repeated FioJobResult jobs = 1;
}

// FioJobResult represents a result of a single fio job.
message FioJobResult  {
  // JobName is the name of the job.
  string job_name = 1 [(gogoproto.jsontag) = "jobname"];
  // Read contains metrics related to performed reads.
  FioReadResult read = 2 [(gogoproto.jsontag) = "read"];
  // Write contains metrics related to performed writes.
  FioWriteResult write = 3 [(gogoproto.jsontag) = "write"];
  // Sync contains metrics related to performed fsync calls.
  FioSyncResult sync = 4 [(gogoproto.jsontag) = "sync"];
}

// FioReadResult contains read-related metrics.
message FioReadResult {
  // IOPS is the number of read iops.
  double iops = 1 [(gogoproto.jsontag) = "iops"];
}

// FioWriteResult contains write-related metrics.
message FioWriteResult  {
  // IOPS is the number of write iops.
  double iops = 1 [(gogoproto.jsontag) = "iops"];
}

// FioSyncResult contains fsync-related metrics.
message FioSyncResult  {
  // Latency contains fsync latencies distribution.
  FioSyncLatency latency = 1 [(gogoproto.jsontag) = "lat_ns"];
}

// FioSyncLatency contains fsync latencies distribution.
message FioSyncLatency {
  // Percentile is the fsync percentile buckets.
  map<string, int64> percentile = 1 [(gogoproto.jsontag) = "percentile"];
}
